<!DOCTYPE html>
<html>

<head>
    <title>Animación de Esfera en Semiparábolas sin Pasar el Rectángulo</title>
    <script type="text/javascript" src="https://threejs.org/build/three.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.7/dat.gui.min.js"></script>
    <style>
        body {
            margin: 0;
            overflow: hidden;
        }
    </style>
</head>

<body>

    <div id="WebGL-output"></div>

    <script type="text/javascript">
        var scene, camera, renderer, sphere, cube, ground;
        var cubeRotationSpeed = 0.02; // Velocidad de la animación de rotación del cubo;
        var amplitude = 5; // Amplitud de la semiparábola

        var guiControls = {
            sphereSpeed: 0.01, // Velocidad de la animación de la esfera
            cubeSpeed: 0.02 // Velocidad de la animación del cubo
        };

        function init() {
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x888888); // Fondo gris

            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(-10, 10, 10);
            camera.lookAt(0, 0, 0); // Mira hacia el centro de la escena

            renderer = new THREE.WebGLRenderer();
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.shadowMap.enabled = true; // Habilita sombras
            document.getElementById("WebGL-output").appendChild(renderer.domElement);

            // Crea una esfera más grande
            var sphereGeometry = new THREE.SphereGeometry(3, 32, 32);
            var sphereMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000 }); // Material Phong para sombras
            sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
            sphere.position.set(-4, amplitude, 0); // Coloca la esfera con amplitud en Y
            sphere.castShadow = true; // La esfera emite sombras
            scene.add(sphere);

            // Crea un cubo
            var cubeGeometry = new THREE.BoxGeometry(2, 2, 2);
            var cubeMaterial = new THREE.MeshPhongMaterial({ color: 0x0000ff }); // Material Phong para sombras
            cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
            cube.position.set(4, 3, 0); // Coloca el cubo a la derecha del rectángulo
            cube.castShadow = true; // El cubo emite sombras
            scene.add(cube);

            // Crea el rectángulo
            var groundGeometry = new THREE.PlaneGeometry(20, 15); // Largo: 20, Ancho: 15
            var groundMaterial = new THREE.MeshPhongMaterial({ color: 0x444444 });
            ground = new THREE.Mesh(groundGeometry, groundMaterial);
            ground.rotation.x = -Math.PI / 2;
            ground.position.set(0, -2, 0);
            ground.receiveShadow = true; // El suelo recibe sombras
            scene.add(ground);

            // Luz direccional para iluminar la escena
            var directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
            directionalLight.position.set(10, 10, 10);
            directionalLight.castShadow = true; // La luz emite sombras
            scene.add(directionalLight);

            // Luz ambiental para iluminación general
            var ambientLight = new THREE.AmbientLight(0x404040); // Color gris oscuro
            scene.add(ambientLight);

            // Configura los controles de interfaz
            var gui = new dat.GUI();
            gui.add(guiControls, 'sphereSpeed', 0, 0.1).name('Velocidad de la Esfera');
            gui.add(guiControls, 'cubeSpeed', 0, 0.1).name('Velocidad del Cubo');
        }

        function animate() {
            requestAnimationFrame(animate);

            // Aplica las animaciones con las velocidades ajustables
            sphere.position.y = amplitude * Math.sin(Date.now() * guiControls.sphereSpeed); // Trayectoria de semiparábola
            cube.rotation.x += guiControls.cubeSpeed;
            cube.rotation.y += guiControls.cubeSpeed;

            // Ajusta la posición de la cámara para seguir la animación
            camera.position.set(-10, 10, 10);
            camera.lookAt(0, 0, 0);

            renderer.render(scene, camera);
        }

        init();
        animate();
    </script>
</body>

</html>



